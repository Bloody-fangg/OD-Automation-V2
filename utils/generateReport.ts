import * as XLSX from 'xlsx';
import { EventMetadata, GroupedStudentData, StudentWithMissedLectures } from '@/types/od';

/**
 * Generates Excel report with metadata and student data
 * @param metadata - Event metadata
 * @param groupedData - Students grouped by program-section
 * @returns Base64 encoded Excel file
 */
export function generateReport(
  metadata: EventMetadata,
  groupedData: GroupedStudentData[]
): string {
  console.log('üìä Generating Excel report...');
  
  // Create a new workbook
  const workbook = XLSX.utils.book_new();
  
  // Create metadata sheet
  const metadataSheet = createMetadataSheet(metadata);
  XLSX.utils.book_append_sheet(workbook, metadataSheet, 'Event Details');
  
  // Create student data sheet
  const dataSheet = createStudentDataSheet(groupedData);
  XLSX.utils.book_append_sheet(workbook, dataSheet, 'Student Data');
  
  // Create summary sheet
  const summarySheet = createSummarySheet(metadata, groupedData);
  XLSX.utils.book_append_sheet(workbook, summarySheet, 'Summary');
  
  // Generate Excel file as base64
  const excelBuffer = XLSX.write(workbook, { 
    type: 'array', 
    bookType: 'xlsx',
    compression: true 
  });
  
  const base64 = Buffer.from(excelBuffer).toString('base64');
  
  console.log('‚úÖ Excel report generated successfully');
  console.log(`üìè Report size: ${Math.round(base64.length / 1024)} KB`);
  
  return base64;
}

/**
 * Creates metadata sheet with event details
 * @param metadata - Event metadata
 * @returns Excel worksheet
 */
function createMetadataSheet(metadata: EventMetadata): XLSX.WorkSheet {
  console.log('üìã Creating metadata sheet...');
  
  const data: string[][] = [
    ['Event Details', ''],
    ['', ''],
    ['Event Name', metadata.eventName || 'N/A'],
    ['Event Date', metadata.eventDate || 'N/A'],
    ['Event Time', metadata.eventTime || 'N/A'],
    ['Event Venue', metadata.eventVenue || 'N/A'],
    ['Organizing Department', metadata.organizingDepartment || 'N/A'],
    ['Faculty In-charge', metadata.facultyIncharge || 'N/A'],
    ['Contact Details', metadata.contactDetails || 'N/A'],
    ['', ''],
    ['Report Generated', new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })],
    ['Generated By', 'OD Automation System']
  ];
  
  // Add any additional metadata
  Object.entries(metadata).forEach(([key, value]) => {
    if (!['eventName', 'eventDate', 'eventTime', 'eventVenue', 'organizingDepartment', 'facultyIncharge', 'contactDetails'].includes(key)) {
      data.push([key, value || 'N/A']);
    }
  });
  
  const worksheet = XLSX.utils.aoa_to_sheet(data);
  
  // Set column widths
  worksheet['!cols'] = [
    { width: 25 }, // Column A - Labels
    { width: 50 }  // Column B - Values
  ];
  
  // Style the header
  if (worksheet['A1']) {
    worksheet['A1'].s = {
      font: { bold: true, size: 14 },
      alignment: { horizontal: 'center' }
    };
  }
  
  console.log('‚úÖ Metadata sheet created');
  return worksheet;
}

/**
 * Creates student data sheet with detailed information
 * @param groupedData - Students grouped by program-section
 * @returns Excel worksheet
 */
function createStudentDataSheet(groupedData: GroupedStudentData[]): XLSX.WorkSheet {
  console.log('üë• Creating student data sheet...');
  
  // Headers
  const headers = [
    'S.No.',
    'Student Name',
    'Program',
    'Section',
    'Semester',
    'Missed Subject',
    'Faculty',
    'Time',
    'Room',
    'Type'
  ];
  
  const data: (string | number)[][] = [headers];
  
  let serialNumber = 1;
  
  // Process each group
  groupedData.forEach(group => {
    // Add group header
    data.push([
      '',
      `=== ${group.groupKey} ===`,
      '',
      '',
      '',
      '',
      '',
      '',
      '',
      ''
    ]);
    
    // Process each student in the group
    group.students.forEach(student => {
      if (student.missedLectures.length === 0) {
        // Student with no missed lectures
        data.push([
          serialNumber++,
          student.name,
          student.program,
          student.section,
          student.semester,
          'No missed lectures',
          '',
          '',
          '',
          ''
        ]);
      } else {
        // Student with missed lectures - create one row per missed lecture
        student.missedLectures.forEach((lecture, lectureIndex) => {
          data.push([
            lectureIndex === 0 ? serialNumber++ : '', // Only show serial number on first row
            lectureIndex === 0 ? student.name : '', // Only show name on first row
            lectureIndex === 0 ? student.program : '',
            lectureIndex === 0 ? student.section : '',
            lectureIndex === 0 ? student.semester : '',
            lecture.subject_name,
            lecture.faculty,
            lecture.time,
            lecture.room,
            lecture.type
          ]);
        });
      }
    });
    
    // Add empty row between groups
    data.push(['', '', '', '', '', '', '', '', '', '']);
  });
  
  const worksheet = XLSX.utils.aoa_to_sheet(data);
  
  // Set column widths
  worksheet['!cols'] = [
    { width: 8 },  // S.No.
    { width: 25 }, // Student Name
    { width: 15 }, // Program
    { width: 12 }, // Section
    { width: 10 }, // Semester
    { width: 30 }, // Missed Subject
    { width: 25 }, // Faculty
    { width: 15 }, // Time
    { width: 15 }, // Room
    { width: 10 }  // Type
  ];
  
  // Style the header row
  for (let col = 0; col < headers.length; col++) {
    const cellAddress = XLSX.utils.encode_cell({ r: 0, c: col });
    if (worksheet[cellAddress]) {
      worksheet[cellAddress].s = {
        font: { bold: true },
        fill: { fgColor: { rgb: 'E6E6FA' } },
        alignment: { horizontal: 'center' }
      };
    }
  }
  
  console.log(`‚úÖ Student data sheet created with ${data.length - 1} rows`);
  return worksheet;
}

/**
 * Creates summary sheet with statistics
 * @param metadata - Event metadata
 * @param groupedData - Students grouped by program-section
 * @returns Excel worksheet
 */
function createSummarySheet(
  metadata: EventMetadata,
  groupedData: GroupedStudentData[]
): XLSX.WorkSheet {
  console.log('üìà Creating summary sheet...');
  
  // Calculate statistics
  const totalStudents = groupedData.reduce((sum, group) => sum + group.students.length, 0);
  const totalGroups = groupedData.length;
  const totalMissedLectures = groupedData.reduce((sum, group) => {
    return sum + group.students.reduce((lectureSum, student) => {
      return lectureSum + student.missedLectures.length;
    }, 0);
  }, 0);
  
  const studentsWithMissedLectures = groupedData.reduce((count, group) => {
    return count + group.students.filter(student => student.missedLectures.length > 0).length;
  }, 0);
  
  const studentsWithoutMissedLectures = totalStudents - studentsWithMissedLectures;
  
  // Create summary data
  const data: (string | number)[][] = [
    ['OD Request Summary', ''],
    ['', ''],
    ['Event Information', ''],
    ['Event Name', metadata.eventName || 'N/A'],
    ['Event Date', metadata.eventDate || 'N/A'],
    ['Event Time', metadata.eventTime || 'N/A'],
    ['', ''],
    ['Statistics', ''],
    ['Total Students', totalStudents],
    ['Total Program-Section Groups', totalGroups],
    ['Total Missed Lectures', totalMissedLectures],
    ['Students with Missed Lectures', studentsWithMissedLectures],
    ['Students without Missed Lectures', studentsWithoutMissedLectures],
    ['', ''],
    ['Group Breakdown', '']
  ];
  
  // Add group-wise breakdown
  groupedData.forEach((group, index) => {
    const groupMissedLectures = group.students.reduce((sum, student) => sum + student.missedLectures.length, 0);
    data.push([
      `${index + 1}. ${group.groupKey}`,
      `${group.students.length} students, ${groupMissedLectures} missed lectures`
    ]);
  });
  
  data.push(['', '']);
  data.push(['Report Generated', new Date().toLocaleString('en-IN', { timeZone: 'Asia/Kolkata' })]);
  
  const worksheet = XLSX.utils.aoa_to_sheet(data);
  
  // Set column widths
  worksheet['!cols'] = [
    { width: 30 }, // Column A - Labels
    { width: 50 }  // Column B - Values
  ];
  
  // Style the main header
  if (worksheet['A1']) {
    worksheet['A1'].s = {
      font: { bold: true, size: 16 },
      alignment: { horizontal: 'center' }
    };
  }
  
  // Style section headers
  const sectionHeaders = ['Event Information', 'Statistics', 'Group Breakdown'];
  data.forEach((row, rowIndex) => {
    if (sectionHeaders.includes(row[0] as string)) {
      const cellAddress = XLSX.utils.encode_cell({ r: rowIndex, c: 0 });
      if (worksheet[cellAddress]) {
        worksheet[cellAddress].s = {
          font: { bold: true, size: 12 },
          fill: { fgColor: { rgb: 'F0F8FF' } }
        };
      }
    }
  });
  
  console.log('‚úÖ Summary sheet created');
  return worksheet;
}

/**
 * Generates dynamic filename for the report
 * @param metadata - Event metadata
 * @returns Formatted filename
 */
export function generateReportFilename(metadata: EventMetadata): string {
  const eventName = (metadata.eventName || 'Event').replace(/[^a-zA-Z0-9\s]/g, '').trim();
  const eventDate = formatDateForFilename(metadata.eventDate);
  
  return `OD Report ‚Äì ${eventName} (${eventDate}).xlsx`;
}

/**
 * Formats date for filename (DD-MM-YYYY)
 * @param dateStr - Raw date string
 * @returns Formatted date string
 */
function formatDateForFilename(dateStr: string): string {
  if (!dateStr) return 'TBD';
  
  try {
    const date = new Date(dateStr);
    
    if (isNaN(date.getTime())) {
      return dateStr.replace(/[^a-zA-Z0-9]/g, '-');
    }
    
    const day = date.getDate().toString().padStart(2, '0');
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const year = date.getFullYear();
    
    return `${day}-${month}-${year}`;
    
  } catch (error) {
    console.warn(`‚ö†Ô∏è Could not format date for filename "${dateStr}":`, error);
    return dateStr.replace(/[^a-zA-Z0-9]/g, '-');
  }
}

/**
 * Validates report data before generation
 * @param metadata - Event metadata
 * @param groupedData - Students grouped by program-section
 * @returns Validation result
 */
export function validateReportData(
  metadata: EventMetadata,
  groupedData: GroupedStudentData[]
): { isValid: boolean; warnings: string[] } {
  console.log('üîç Validating report data...');
  
  const warnings: string[] = [];
  
  // Check metadata
  if (!metadata.eventName) {
    warnings.push('Event name is missing');
  }
  
  if (!metadata.eventDate) {
    warnings.push('Event date is missing');
  }
  
  // Check student data
  if (groupedData.length === 0) {
    warnings.push('No student groups found');
  }
  
  const totalStudents = groupedData.reduce((sum, group) => sum + group.students.length, 0);
  if (totalStudents === 0) {
    warnings.push('No students found in any group');
  }
  
  // Check for empty groups
  const emptyGroups = groupedData.filter(group => group.students.length === 0);
  if (emptyGroups.length > 0) {
    warnings.push(`${emptyGroups.length} empty groups found`);
  }
  
  const isValid = warnings.length === 0;
  
  console.log(`‚úÖ Report validation complete: ${isValid ? 'Valid' : 'Has warnings'}`);
  if (warnings.length > 0) {
    console.log('‚ö†Ô∏è Warnings:', warnings);
  }
  
  return { isValid, warnings };
}
